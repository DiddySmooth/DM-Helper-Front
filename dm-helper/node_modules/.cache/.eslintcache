[{"Z:\\DM Helper\\Frontend\\dm-helper\\src\\index.tsx":"1","Z:\\DM Helper\\Frontend\\dm-helper\\src\\App.tsx":"2","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Home\\Home.tsx":"3","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\Generators.tsx":"4","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\NpcGen\\RandomNpc.tsx":"5","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\MagicShopGen\\MagicShop.tsx":"6","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\NpcGen\\Arrays.ts":"7","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\NpcGen\\Functions.ts":"8","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Components\\Inputs\\Inputs.tsx":"9","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Components\\TextBox\\TextBox.tsx":"10","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Components\\TextBox\\GenTextBox.tsx":"11","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\TownGen\\TownGen.tsx":"12","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\MagicShopGen\\Functions.ts":"13","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\MagicShopGen\\Arrays.ts":"14","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Components\\Buttons\\Button.tsx":"15","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Store\\index.ts":"16","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Store\\hooks.ts":"17","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Store\\Models\\index.ts":"18","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Login\\Login.tsx":"19","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Register\\Register.tsx":"20","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Modules\\NavBar.tsx":"21"},{"size":423,"mtime":1635105030754,"results":"22","hashOfConfig":"23"},{"size":1500,"mtime":1635108837035,"results":"24","hashOfConfig":"23"},{"size":231,"mtime":1635177683991,"results":"25","hashOfConfig":"23"},{"size":1578,"mtime":1634842032142,"results":"26","hashOfConfig":"23"},{"size":6221,"mtime":1635089261038,"results":"27","hashOfConfig":"23"},{"size":2798,"mtime":1634839697648,"results":"28","hashOfConfig":"23"},{"size":97098,"mtime":1634077806087,"results":"29","hashOfConfig":"23"},{"size":3425,"mtime":1635018757461,"results":"30","hashOfConfig":"23"},{"size":505,"mtime":1634827930725,"results":"31","hashOfConfig":"23"},{"size":520,"mtime":1633973802300,"results":"32","hashOfConfig":"23"},{"size":1233,"mtime":1634838411984,"results":"33","hashOfConfig":"23"},{"size":379,"mtime":1634827005215,"results":"34","hashOfConfig":"23"},{"size":149,"mtime":1634827005214,"results":"35","hashOfConfig":"23"},{"size":283,"mtime":1634827005213,"results":"36","hashOfConfig":"23"},{"size":692,"mtime":1634842415529,"results":"37","hashOfConfig":"23"},{"size":129,"mtime":1635105729206,"results":"38","hashOfConfig":"23"},{"size":291,"mtime":1635105687452,"results":"39","hashOfConfig":"23"},{"size":320,"mtime":1635107834924,"results":"40","hashOfConfig":"23"},{"size":1537,"mtime":1635107979320,"results":"41","hashOfConfig":"23"},{"size":1544,"mtime":1635107981692,"results":"42","hashOfConfig":"23"},{"size":1086,"mtime":1635108314240,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"r5990p",{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"Z:\\DM Helper\\Frontend\\dm-helper\\src\\index.tsx",[],["96","97"],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\App.tsx",["98","99"],"import {Route, Redirect} from 'react-router-dom'\nimport {useState, useEffect} from 'react'\nimport axios from \"axios\"\nimport './App.css';\nimport Generators from './Pages/Generators/Generators';\nimport NavBar from './Modules/NavBar';\nimport Home from './Pages/Home/Home';\nimport { useStoreActions, useStoreState } from './Store/hooks';\nimport Login from './Pages/Login/Login';\nimport Register from './Pages/Register/Register';\n\ninterface User {\n    email: string;\n    id: string;\n    username: string;\n}\n\nfunction App() {\n    const {setName} = useStoreActions(store => store)\n    const userId = localStorage.getItem('userId')\n    const { name } = useStoreState((store) => store)\n\n    const getUserInfo = async () => {\n        if(userId === null){return}\n        try{\n            let user = await axios.get<User>(`http://localhost:3001/user/getinfo`, {\n                headers:{\n                    Authorization: userId\n                }\n            })\n            setName(user.data.username)\n        }catch(error){\n            console.log(error)\n        }\n    }\n    \n    useEffect(() => {\n        getUserInfo()\n    },[])\n  return (\n    <div className=\"App\">\n        <NavBar />\n        <Route exact path=\"/home\"><Home /></Route>\n        <Route exact path=\"/gen\"><Generators /></Route>\n        <Route exact path=\"/login\">{name ? <Redirect to=\"/home\" />:<Login />}</Route>\n        <Route exact path=\"/register\">{name ? <Redirect to=\"/home\" />:<Register />}</Route>\n    </div>\n  );\n}\n\nexport default App;\n","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Home\\Home.tsx",["100","101"],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\Generators.tsx",["102","103","104"],"import React, { useState } from 'react';\r\nimport Npc from '../../Assets/npc.png'\r\nimport MagicShop from '../../Assets/magicShop.png'\r\nimport RandomNpc from './NpcGen/RandomNpc';\r\nimport RandomMagicShop from './MagicShopGen/MagicShop';\r\nimport TownGen from './TownGen/TownGen';\r\nimport CSS from 'csstype'\r\n\r\nconst GenIcon: CSS.Properties = {\r\n    width: \"50px\",\r\n    height: \"50px\",\r\n    border: \"1px solid black\",\r\n}\r\n\r\nconst Generators = () => {\r\n\r\n    const [npc, setNpc] = useState<boolean>(false)\r\n    const [magicShop, setMagicShop] = useState<boolean>(false)\r\n    const [town, setTown] = useState<boolean>(false)\r\n\r\n    const resetState = () => {\r\n        setNpc(false)\r\n        setMagicShop(false)\r\n        setTown(false)\r\n\r\n    }\r\n\r\n    const clickHandle = (button: string) => {\r\n        if(button === \"NPC\"){\r\n            resetState()\r\n            setNpc(true)\r\n        }\r\n        else if(button === \"MagicShop\"){\r\n            resetState()\r\n            setMagicShop(true)\r\n        }\r\n        else if(button === \"Town\"){\r\n            resetState()\r\n            setTown(true)\r\n        }\r\n    }\r\n    return(\r\n        <div>\r\n            <img style={GenIcon} src={Npc} onClick={ () => {clickHandle(\"NPC\")}}/>\r\n            <img style={GenIcon} src={MagicShop} onClick={ () => {clickHandle(\"MagicShop\")}}/>\r\n            <img style={GenIcon} src={Npc} onClick={ () => {clickHandle(\"Town\")}}/>\r\n            {npc && <RandomNpc />}\r\n            {magicShop && <RandomMagicShop />}\r\n            {town && <TownGen />}\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Generators","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\NpcGen\\RandomNpc.tsx",["105"],"import { useState, useEffect, MouseEvent } from 'react';\r\nimport CSS from 'csstype'\r\nimport GenTextBox from '../../../Components/TextBox/GenTextBox';\r\nimport Button from '../../../Components/Buttons/Button';\r\nimport { races } from \"./Arrays\"\r\nimport { setNames, setAges, setGenders, setJobs, setTraits, setEyeColors, setHairColors, setHairLengths, setHairTextures, setSkinColors, setSkinFeatures } from \"./Functions\"\r\nimport \"./RandomNpc.css\"\r\n\r\nconst GenBoxContainerStyle: CSS.Properties = {\r\n    width: \"635px\",\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"black\",\r\n    color: \"white\",\r\n    border: \"3px solid black\",\r\n    textAlign: \"center\",\r\n}\r\n\r\nconst RandomNpc = () => {\r\n\r\n    const [npc, setNpc] = useState({ \r\n        race: \"\",\r\n        name: \"\",\r\n        age: \"\",\r\n        gender: \"\",\r\n        job: \"\",\r\n        trait: \"\",\r\n        skinColor: \"\",\r\n        skinFeature: \"\",\r\n        hairColor: \"\",\r\n        hairTexture: \"\",\r\n        hairLength: \"\",\r\n        eyeColor: \"\",\r\n    });\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setNpc(prevState => ({...prevState, name: (setNames(npc.race, npc.gender))}))\r\n        setNpc(prevState => ({...prevState, age: (setAges(npc.race))}))\r\n        \r\n    },[npc.race]);\r\n\r\n    useEffect(() => {\r\n        npcGen()\r\n    }, [])\r\n\r\n\r\n\r\n    const npcGen = () => {\r\n        setNpc(prevState => ({...prevState, gender: (setGenders())}))\r\n        setNpc(prevState => ({...prevState, race: (races[Math.floor(Math.random() * races.length)])}))\r\n        setNpc(prevState => ({...prevState, job: (setJobs())}))\r\n        setNpc(prevState => ({...prevState, trait: (setTraits())}))\r\n        setNpc(prevState => ({...prevState, skinColor: (setSkinColors())}))\r\n        setNpc(prevState => ({...prevState, skinFeature: (setSkinFeatures())}))\r\n        setNpc(prevState => ({...prevState, hairColor: setHairColors()}))\r\n        setNpc(prevState => ({...prevState, hairTexture: setHairTextures()}))\r\n        setNpc(prevState => ({...prevState, hairLength: setHairLengths()}))\r\n        setNpc(prevState => ({...prevState, eyeColor: setHairColors()}))\r\n    }\r\n\r\n    const onClick = (event : MouseEvent) => {\r\n        event.preventDefault();\r\n        const elem = event.currentTarget\r\n        if(!(elem instanceof HTMLButtonElement)) return;\r\n\r\n        if(elem.value === \"Race\"){setNpc(prevState => ({...prevState, race: (races[Math.floor(Math.random() * races.length)])}))}\r\n        else if(elem.value === \"Name\"){setNpc(prevState => ({...prevState, name: (setNames(npc.race, npc.gender))}))}\r\n        else if(elem.value === \"Gender\"){setNpc(prevState => ({...prevState, gender: (setGenders())}))}\r\n        else if(elem.value === \"Job\"){setNpc(prevState => ({...prevState, job: (setJobs())}))}\r\n        else if(elem.value === \"Age\"){setNpc(prevState => ({...prevState, age: (setAges(npc.race))}))}\r\n        else if(elem.value === \"Traits\"){setNpc(prevState => ({...prevState, trait: (setTraits())}))}\r\n        else if(elem.value === \"Skin Color\"){setNpc(prevState => ({...prevState, skinColor: (setSkinColors())}))}\r\n        else if(elem.value === \"Skin Feature\"){setNpc(prevState => ({...prevState, skinFeature: (setSkinFeatures())}))}\r\n        else if(elem.value === \"Hair Color\"){setNpc(prevState => ({...prevState, hairColor: setHairColors()}))}\r\n        else if(elem.value === \"Hair Texture\"){setNpc(prevState => ({...prevState, hairTexture: setHairTextures()}))}\r\n        else if(elem.value === \"Hair Length\"){setNpc(prevState => ({...prevState, hairLength: setHairLengths()}))}\r\n        else if(elem.value === \"Eye Color\"){setNpc(prevState => ({...prevState, eyeColor: setEyeColors()}))}\r\n    }\r\n    \r\n    const textExport = () =>{\r\n        navigator.clipboard.writeText(`Name: ${npc.name} Race: ${npc.race} Gender: ${npc.gender} Profession: ${npc.job} Age: ${npc.age} Personality Trait ${npc.trait} \r\n        Skin Color: ${npc.skinColor} Skin Feature: ${npc.skinFeature} Hair Color: ${npc.hairColor} Hair Texture: ${npc.hairTexture} Hair Length: ${npc.hairLength} Eye Color: ${npc.eyeColor}`)\r\n    }\r\n    \r\n    \r\n    return(\r\n        <div className =\"npc\">\r\n            <div style={GenBoxContainerStyle}>\r\n                <h1 style={{width: \"600px\"}}>General Info</h1>\r\n                <GenTextBox className=\"npcBox\"payload={npc.name}text=\"Name: \" onClick={onClick} value=\"Name\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.race}text=\"Race: \" onClick={onClick} value= \"Race\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.gender}text=\"Gender: \" onClick={onClick} value= \"Gender\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.job}text=\"Profession: \" onClick={onClick}  value=\"Job\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.age}text=\"Age: \"  onClick={onClick} value=\"Age\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.trait}text=\"Personality Trait: \" onClick={onClick} value=\"Traits\"/>\r\n            </div>\r\n            <div style={GenBoxContainerStyle}>\r\n                <h1 style={{width: \"600px\"}}>Appearance</h1>\r\n                <GenTextBox className=\"npcBox\"payload={npc.skinColor}text=\"Skin Color: \" onClick={onClick} value=\"Skin Color\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.skinFeature}text=\"Skin Feature: \" onClick={onClick} value=\"Skin Feature\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.hairColor}text=\"Hair Color: \" onClick={onClick} value=\"Hair Color\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.hairTexture}text=\"Hair Texture: \" onClick={onClick} value=\"Hair Texture\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.hairLength}text=\"Hair Length: \" onClick={onClick} value=\"Hair Length\"/>\r\n                <GenTextBox className=\"npcBox\"payload={npc.eyeColor}text=\"Eye Color: \" onClick={onClick} value=\"Eye Color\"/>\r\n                <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\r\n                    <Button  text=\"New NPC\"onClick={npcGen} value=\"new\"/>\r\n                    <Button text=\"Export\"onClick={textExport} value=\"new\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default RandomNpc","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\MagicShopGen\\MagicShop.tsx",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\NpcGen\\Arrays.ts",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\NpcGen\\Functions.ts",["106","107"],"import { isJSDocAugmentsTag } from \"typescript\"\r\nimport { tabaxiNames, elfNames, jobs, traits, skinColors, skinFeatures, hairColors, hairTextures, hairLengths, eyeColors, NamesFemale, NamesMale} from \"./Arrays\"\r\nexport const setNames = (race:string, gender:string) => {\r\n    if(race === \"Tabaxi\"){\r\n        return (tabaxiNames[Math.floor(Math.random() * tabaxiNames.length)])\r\n    }\r\n    else if(gender === \"Male\"){\r\n        return (NamesMale[Math.floor(Math.random() * NamesMale.length)])\r\n    }\r\n    else{\r\n        return (NamesFemale[Math.floor(Math.random() * NamesFemale.length)])\r\n    }\r\n}\r\n\r\nlet race80 = [\"Tabaxi\", \"Human\", \"Dragonborn\", \"Half-Orc\", \"Tiefling\", \"Goliath\", \"Changeling\", \"Locathah\", \"Centaur\", \"Loxodon\", \"Minotaur\", \"Hobgoblin\", \"Bugbear\", \"Yuan-ti\", \"Satyr\"]\r\n\r\nexport const setAges = (race:string) => {\r\n    let age = \"30\"\r\n    if(race === \"Aarakocra\"){\r\n        age = Math.floor(Math.random() * 30).toString()\r\n    }\r\n    else if(race === \"Orc\"){\r\n        age = Math.floor(Math.random() * 45).toString()\r\n    }\r\n    else if(race === \"Lizardfolk\" || race === \"Goblin\"){\r\n        age = Math.floor(Math.random() * 60).toString()\r\n    }\r\n    else if(race80.includes(race)){\r\n        age = Math.floor(Math.random() * 80).toString()\r\n    }\r\n    else if(race === \"Leonin\"){\r\n        age = Math.floor(Math.random() * 100).toString()\r\n    }\r\n    else if(race === \"Genasi\" || race === \"Kobold\"){\r\n        age = Math.floor(Math.random() * 120).toString()\r\n    }\r\n    else if(race === \"Half-Elf\"){\r\n        age = Math.floor(Math.random() * 180).toString()\r\n    }\r\n    else if(race === \"Triton\"){\r\n        age = Math.floor(Math.random() * 200).toString()\r\n    }\r\n    else if(race === \"Halfling\"){\r\n        age = Math.floor(Math.random() * 250).toString()\r\n    }\r\n    else if(race === \"Dwarf\"){\r\n        age = Math.floor(Math.random() * 350).toString()\r\n    }\r\n    else if(race === \"Loxodon\"){\r\n        age = Math.floor(Math.random() * 450).toString()\r\n    }\r\n    else if(race === \"Gnome\" || race === \"Firbolg\"){\r\n        age = Math.floor(Math.random() * 500).toString()\r\n    }\r\n    else if(race === \"Elf\"){\r\n        age = Math.floor(Math.random() * 750).toString()\r\n    }\r\n    else if(race === \"Tortle\" || race === \"Warforged\"){\r\n        age = Math.floor(Math.random() * 1000).toString()\r\n    }\r\n    return age\r\n}\r\n\r\nexport const setGenders = () => {\r\n    let gender = Math.floor(Math.random() *  2)\r\n    if(gender === 0){\r\n        return(\"Male\")\r\n    }\r\n    else{\r\n        return(\"Female\")\r\n    }\r\n\r\n}\r\nexport const setJobs = () => {\r\n    return(jobs[Math.floor(Math.random() * jobs.length)])\r\n}\r\n\r\nexport const setTraits = () => {\r\n    console.log(traits.length)\r\n    return(traits[Math.floor(Math.random() * traits.length)])\r\n}\r\n\r\nexport const setSkinColors = () => {\r\n    return skinColors[Math.floor(Math.random() * skinColors.length)]\r\n}\r\nexport const setSkinFeatures = () => {\r\n    return skinFeatures[Math.floor(Math.random() * skinFeatures.length)]\r\n}\r\nexport const setHairColors = () => {\r\n    return hairColors[Math.floor(Math.random() * skinColors.length)]\r\n}\r\nexport const setHairTextures = () => {\r\n    return hairTextures[Math.floor(Math.random() * hairTextures.length)]\r\n}\r\nexport const setHairLengths = () => {\r\n    return hairLengths[Math.floor(Math.random() * hairLengths.length)]\r\n}\r\nexport const setEyeColors = () => {\r\n    return eyeColors[Math.floor(Math.random() * eyeColors.length)]\r\n}","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Components\\Inputs\\Inputs.tsx",[],["108","109"],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Components\\TextBox\\TextBox.tsx",["110"],"import CSS from 'csstype'\r\n\r\nexport type TextBoxProps = {\r\n    className: string;\r\n    payload: any;\r\n    text: string;\r\n}\r\n\r\nconst TextBoxStyles: CSS.Properties = {\r\n    backgroundColor: 'rgba(255, 255, 255, 0.85)',\r\n    color: 'black',\r\n    padding: '0.5rem',\r\n    boxShadow: '0 0 10px rgba(0, 0, 0, 0.3)',\r\n    border: '1px solid black' \r\n  };\r\n\r\nconst TextBox = ({className, text, payload}:TextBoxProps) => {\r\n    return(\r\n        <span className={className}>{text} {payload}</span>\r\n    )\r\n}\r\nexport default TextBox","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Components\\TextBox\\GenTextBox.tsx",["111"],"import TextBox from \"./TextBox\"\r\nimport image from \"../../Assets/reload.png\"\r\nimport { MouseEvent } from \"react\"\r\nimport CSS from 'csstype'\r\nexport type GenTextBoxProps = {\r\n    className: string;\r\n    payload: any;\r\n    text: string;\r\n    onClick: (event: MouseEvent) => void;\r\n    value?: string;\r\n}\r\nconst GenBoxStyles: CSS.Properties = {\r\n    border: \"1px solid white\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    width: \"300px\",\r\n    height: \"30px\",\r\n    margin: \"5px\",\r\n    marginBottom: \"10px\",\r\n    backgroundColor: \"black\",\r\n    color: \"white\",\r\n}\r\nconst ReloadImgStyles: CSS.Properties = {\r\n    width: \"25px\",\r\n    height: \"25px\",\r\n}\r\nconst ButtonImageStyles: CSS.Properties = {\r\n    border: \"none\"\r\n}\r\n\r\nconst GenTextBox = ({className, text, payload, onClick, value}:GenTextBoxProps) => {\r\n    return(\r\n        <div style={GenBoxStyles}>\r\n            <TextBox className={className} text={text} payload={payload}/>\r\n            <button onClick={onClick} value={value} style={ButtonImageStyles}>\r\n            <img \r\n                src={image}\r\n                style={ReloadImgStyles}\r\n            />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\nexport default GenTextBox","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\TownGen\\TownGen.tsx",["112","113","114","115","116","117","118","119"],"import { useState } from \"react\"\r\n\r\nconst TownGen = () => {\r\n\r\n    const [Name, setName] = useState<string>(\"\")\r\n    const [Population, setPopulation] = useState<string>(\"\")\r\n    const [River, setRiver] = useState<boolean>()\r\n    const [Coast, setCoast] = useState<boolean>()\r\n    \r\n    return(\r\n        <div>\r\n            Town\r\n        </div>\r\n    )\r\n}\r\nexport default TownGen\r\n","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\MagicShopGen\\Functions.ts",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Generators\\MagicShopGen\\Arrays.ts",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Components\\Buttons\\Button.tsx",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Store\\index.ts",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Store\\hooks.ts",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Store\\Models\\index.ts",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Login\\Login.tsx",["120"],"import TextInput from \"../../Components/Inputs/Inputs\"\r\nimport { useState } from \"react\"\r\nimport { useStoreActions } from '../../Store/hooks'\r\nimport axios from \"axios\"\r\n\r\n\r\ninterface User {\r\n    id: string;\r\n    username: string;\r\n}\r\n\r\nconst Login = () => {\r\n    const [username, setUsername] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const {setName} = useStoreActions(store => store)\r\n\r\n    const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault()\r\n        try {\r\n            let res = await axios.post<User>(`http://localhost:3001/user/login`, {\r\n                username: username,\r\n                password: password,\r\n                \r\n            })\r\n            localStorage.setItem('userId', res.data.id)\r\n            setName(username)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          <form onSubmit={handleSubmit}>\r\n                <div>\r\n                    <label>Username</label>\r\n                    <input type =\"text\" placeholder=\"username\" value={username} onChange={(e) => setUsername(e.target.value)}></input>\r\n                </div>\r\n                <div>\r\n                    <label>Password</label>\r\n                    <input type =\"text\" placeholder=\"password\" value={password} onChange={(e) => setPassword(e.target.value)}></input>\r\n                </div>\r\n                <input type=\"submit\"></input>\r\n          </form>\r\n      </div>\r\n    )\r\n}\r\nexport default Login","Z:\\DM Helper\\Frontend\\dm-helper\\src\\Pages\\Register\\Register.tsx",[],"Z:\\DM Helper\\Frontend\\dm-helper\\src\\Modules\\NavBar.tsx",[],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":2,"column":9,"nodeType":"127","messageId":"128","endLine":2,"endColumn":17},{"ruleId":"129","severity":1,"message":"130","line":39,"column":7,"nodeType":"131","endLine":39,"endColumn":9,"suggestions":"132"},{"ruleId":"125","severity":1,"message":"133","line":1,"column":8,"nodeType":"127","messageId":"128","endLine":1,"endColumn":13},{"ruleId":"125","severity":1,"message":"134","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":16},{"ruleId":"135","severity":1,"message":"136","line":44,"column":13,"nodeType":"137","endLine":44,"endColumn":83},{"ruleId":"135","severity":1,"message":"136","line":45,"column":13,"nodeType":"137","endLine":45,"endColumn":95},{"ruleId":"135","severity":1,"message":"136","line":46,"column":13,"nodeType":"137","endLine":46,"endColumn":84},{"ruleId":"129","severity":1,"message":"138","line":44,"column":7,"nodeType":"131","endLine":44,"endColumn":17,"suggestions":"139"},{"ruleId":"125","severity":1,"message":"140","line":1,"column":10,"nodeType":"127","messageId":"128","endLine":1,"endColumn":28},{"ruleId":"125","severity":1,"message":"141","line":2,"column":23,"nodeType":"127","messageId":"128","endLine":2,"endColumn":31},{"ruleId":"121","replacedBy":"142"},{"ruleId":"123","replacedBy":"143"},{"ruleId":"125","severity":1,"message":"144","line":9,"column":7,"nodeType":"127","messageId":"128","endLine":9,"endColumn":36},{"ruleId":"135","severity":1,"message":"136","line":37,"column":13,"nodeType":"137","endLine":40,"endColumn":15},{"ruleId":"125","severity":1,"message":"145","line":5,"column":12,"nodeType":"127","messageId":"128","endLine":5,"endColumn":16},{"ruleId":"125","severity":1,"message":"146","line":5,"column":18,"nodeType":"127","messageId":"128","endLine":5,"endColumn":25},{"ruleId":"125","severity":1,"message":"147","line":6,"column":12,"nodeType":"127","messageId":"128","endLine":6,"endColumn":22},{"ruleId":"125","severity":1,"message":"148","line":6,"column":24,"nodeType":"127","messageId":"128","endLine":6,"endColumn":37},{"ruleId":"125","severity":1,"message":"149","line":7,"column":12,"nodeType":"127","messageId":"128","endLine":7,"endColumn":17},{"ruleId":"125","severity":1,"message":"150","line":7,"column":19,"nodeType":"127","messageId":"128","endLine":7,"endColumn":27},{"ruleId":"125","severity":1,"message":"151","line":8,"column":12,"nodeType":"127","messageId":"128","endLine":8,"endColumn":17},{"ruleId":"125","severity":1,"message":"152","line":8,"column":19,"nodeType":"127","messageId":"128","endLine":8,"endColumn":27},{"ruleId":"125","severity":1,"message":"153","line":1,"column":8,"nodeType":"127","messageId":"128","endLine":1,"endColumn":17},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserInfo'. Either include it or remove the dependency array.","ArrayExpression",["156"],"'Login' is defined but never used.","'Register' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'npc.gender'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setNpc' needs the current value of 'npc.gender'.",["157"],"'isJSDocAugmentsTag' is defined but never used.","'elfNames' is defined but never used.",["154"],["155"],"'TextBoxStyles' is assigned a value but never used.","'Name' is assigned a value but never used.","'setName' is assigned a value but never used.","'Population' is assigned a value but never used.","'setPopulation' is assigned a value but never used.","'River' is assigned a value but never used.","'setRiver' is assigned a value but never used.","'Coast' is assigned a value but never used.","'setCoast' is assigned a value but never used.","'TextInput' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},"Update the dependencies array to be: [getUserInfo]",{"range":"162","text":"163"},"Update the dependencies array to be: [npc.gender, npc.race]",{"range":"164","text":"165"},[1116,1118],"[getUserInfo]",[1278,1288],"[npc.gender, npc.race]"]